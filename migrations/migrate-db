#!/bin/bash

# Enable strict mode:
# -e: exit on any command failure
# -u: treat unset variables as an error
# -o pipefail: return non-zero exit code if any command in a pipeline fails
set -euo pipefail

GREEN="\033[0;32m"
RED="\033[0;31m"
NC="\033[0m" # No Color/Reset

function log_success() {
  echo -e "${GREEN}>>> $1${NC}"
}

function log_error() {
  echo -e "${RED}>>> $1${NC}" >&2
}

function check_env_vars() {
  if [[ -z "${MIGRATION_FOLDER:-}" ]]; then
    log_error "MIGRATION_FOLDER is not set."
    exit 1
  fi

  # Only check for POSTGRESQL_URI if the operation isn't 'create'
  if [[ "$1" != "create" && -z "${POSTGRESQL_URI:-}" ]]; then
    log_error "POSTGRESQL_URI is not set."
    exit 1
  fi
}

function new_migration() {
  local name="$1"

  if [[ -z "$name" ]]; then
    log_error "Migration name is required for 'create'."
    exit 1
  fi

  if migrate create -ext sql -dir "${MIGRATION_FOLDER}" "$name"; then
    log_success "Generated DB migration successfully."
  else
    log_error "Failed to generate DB migration."
    exit 1
  fi
}

function upgrade() {
  if migrate -path "${MIGRATION_FOLDER}" -database "${POSTGRESQL_URI}" up; then
    log_success "Upgraded DB successfully."
  else
    log_error "Failed to upgrade DB."
    exit 1
  fi
}

function downgrade() {
  if migrate -path "${MIGRATION_FOLDER}" -database "${POSTGRESQL_URI}" down 1; then
    log_success "Downgraded DB successfully."
  else
    log_error "Failed to downgrade DB."
    exit 1
  fi
}

main() {
  local cmd="${1:-}"

  case "$cmd" in
    create)
      check_env_vars "create"
      new_migration "${2:-}" # Second argument is migration name
      ;;
    up)
      check_env_vars "up"
      upgrade
      ;;
    down)
      check_env_vars "down"
      downgrade
      ;;
    *)
      log_error "Unknown command: $cmd"
      echo -e "${RED}Usage: $0 {create <name>|up|down}${NC}"
      exit 1
      ;;
  esac
}

# Entry point of the script
main "$@"
